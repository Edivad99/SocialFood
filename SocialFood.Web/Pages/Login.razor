@page "/login"
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager


<h3>Login</h3>

@if(responseMessage != null && !responseMessage.IsSuccessStatusCode)
 {
    <p style="color:red;">Le credenziali inserite non sono corrette</p>
 }

<EditForm Model="user" OnSubmit="HandleLogin">
    <ul class="vertical-form">
        <li>
            <label for="username">Username:</label>
            <InputText id="username" @bind-Value="user.Username" />
        </li>
        <li>
            <label for="password">Password:</label>
            <InputText id="password" @bind-Value="user.Password" type="password" />
        </li>
    </ul>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-primary" @onclick="Registration">Registrazione</button>
        <button type="submit" class="btn btn-primary">Login</button>
    </div>
</EditForm>


@code {
    LoginRequest user = new LoginRequest();
    HttpResponseMessage? responseMessage;

    async Task HandleLogin()
    {
        LoginRequest hashUser = new()
        {
            Username = user.Username,
            Password = SHAUtil.CalculateHash(user.Password)
        }; 
        responseMessage = await HttpClient.PostAsJsonAsync("api/Auth/login", hashUser);
        if(responseMessage.IsSuccessStatusCode)
        {
            var authResponse = await responseMessage.Content.ReadFromJsonAsync<AuthResponse>();
            var token = authResponse.AccessToken;
            await LocalStorage.SetItemAsync("token", token);
            await AuthStateProvider.GetAuthenticationStateAsync();
        }
    }

    void Registration() => NavigationManager.NavigateTo("/registration");

    protected override async void OnAfterRender(bool firstRender)
    {
        string token = await LocalStorage.GetItemAsStringAsync("token");
        if (!string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
        }
        base.OnAfterRender(firstRender);
    }
}
