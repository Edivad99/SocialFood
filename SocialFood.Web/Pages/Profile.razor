@page "/profile/{username?}"
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]


<h2>@(personalAccount ? "Il tuo profilo" : Username)</h2>
@if(!personalAccount)
{
    <h6>@(friends.Where(u => u.Username == Username).Any() ? "È" : "Non è") tuo amico</h6>
}
else
{ 
    <h6>Amici: @friends.Count()</h6>
}


@code{

    [Parameter]
    public string? Username { get; set; }

    bool personalAccount = false;
    List<UserDTO> friends = new();

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Username))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.GetUsername() == Username)
            {
                personalAccount = true;
                Username = user.GetUsername();
            }
        }
        else
            personalAccount = true;
        var url = "/api/Account/friends";
        var responseMessage = await HttpClient.GetAsync(url);
        if (responseMessage.IsSuccessStatusCode)
        {
            friends = await responseMessage.Content.ReadFromJsonAsync<List<UserDTO>>();
        }
    }
}

