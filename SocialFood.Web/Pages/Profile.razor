@page "/profile/{username?}"
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>@(personalAccount ? "Il tuo profilo" : Username) | SocialFood</PageTitle>

<h2>@(personalAccount ? "Il tuo profilo" : Username)</h2>
@if(!personalAccount)
{
    bool isYourFriend = friends.Where(u => u.Username == Username).Any();
    <ButtonFriend IsYourFriend="isYourFriend" FriendUsername="@Username" />
}
else
{ 
    <h6>Amici: @friends.Count()</h6>
}
<h6>Foto pubblicate: @images.Count()</h6>

<ImageList images="images"/>

@code{

    [Parameter]
    public string? Username { get; set; }

    bool personalAccount = false;
    List<UserDTO> friends = new();
    List<ImageDTO> images = new();

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if(string.IsNullOrWhiteSpace(Username))
        {
            // It's my account
            personalAccount = true;
            Username = user.GetUsername();
        }
        else if(user.GetUsername() == Username)
        {
            // Check if it's my account
            personalAccount = true;
            Username = user.GetUsername();
        }

        // Fetch friends
        var friendsMessage = await HttpClient.GetAsync("/api/Account/me/friends");
        if (friendsMessage.IsSuccessStatusCode)
        {
            friends = await friendsMessage.Content.ReadFromJsonAsync<List<UserDTO>>();
        }
        //Fetch images
        var imagesMessage = await HttpClient.GetAsync($"/api/Image/images/{(personalAccount ? "me" : Username)}");
        if (imagesMessage.IsSuccessStatusCode)
        {
            images = await imagesMessage.Content.ReadFromJsonAsync<List<ImageDTO>>();
        }
    }
}

