@page "/profile"
@inject SFClient sfClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (!accountNotFound)
{
    <PageTitle>@(personalAccount ? "Il tuo profilo" : Username) | SocialFood</PageTitle>

    <h2>@(personalAccount ? $"Il tuo profilo ({Username})" : Username)</h2>
    @if (!personalAccount)
    {
        <h6>(@userDTOSearched.Name @userDTOSearched.Surname)</h6>
        bool isYourFriend = friends.Where(u => u.Username == Username).Any();
        <ButtonFriend IsYourFriend="isYourFriend" FriendUsername="@Username" />
    }
    else
    {
        <h6>Amici: @friends.Count()</h6>
    }
    <h6>Foto pubblicate: @images.Count()</h6>

    <ImageList images="images" ShowUsername="false" />
}
else
{
    <PageTitle>Account non trovato | SocialFood</PageTitle>
    <h2>Account non trovato</h2>
}


@code{

    string? Username;
    bool personalAccount = false;
    bool accountNotFound = false;

    List<UserDTO> friends = new();
    List<ImageDTO> images = new();
    UserDTO userDTOSearched = new();

    protected override void OnInitialized()
    {
        NavigationManager.TryGetQueryString<string>("username", out Username);
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState!.User;
        if (string.IsNullOrWhiteSpace(Username))
        {
            // It's my account
            personalAccount = true;
            Username = user.GetUsername();
        }
        else if (user.GetUsername() == Username)
        {
            // Check if it's my account
            personalAccount = true;
            Username = user.GetUsername();
        }
        else
        {
            List<UserDTO> users = await sfClient.GetUserByUsername(Username);
            if(users.Count() != 1)
            {
                accountNotFound = true;
                return;
            }
            userDTOSearched = users.First();
        }

        // Fetch friends
        friends = await sfClient.GetMyFriendsAsync();
        //Fetch images
        images = await sfClient.GetImagesByUsername(Username);
    }
}

